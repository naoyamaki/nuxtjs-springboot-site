/*
 * This file is generated by jOOQ.
 */
package com.example.infrastructure.jooq.tables;


import com.example.infrastructure.jooq.Indexes;
import com.example.infrastructure.jooq.Keys;
import com.example.infrastructure.jooq.Main;
import com.example.infrastructure.jooq.tables.records.ReviewRecord;

import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row9;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Review extends TableImpl<ReviewRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>main.review</code>
     */
    public static final Review REVIEW = new Review();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ReviewRecord> getRecordType() {
        return ReviewRecord.class;
    }

    /**
     * The column <code>main.review.id</code>.
     */
    public final TableField<ReviewRecord, Integer> ID = createField(DSL.name("id"), SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>main.review.user_id</code>.
     */
    public final TableField<ReviewRecord, Integer> USER_ID = createField(DSL.name("user_id"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>main.review.title</code>.
     */
    public final TableField<ReviewRecord, String> TITLE = createField(DSL.name("title"), SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>main.review.body</code>.
     */
    public final TableField<ReviewRecord, String> BODY = createField(DSL.name("body"), SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>main.review.category_id</code>.
     */
    public final TableField<ReviewRecord, Integer> CATEGORY_ID = createField(DSL.name("category_id"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>main.review.status</code>.
     */
    public final TableField<ReviewRecord, Integer> STATUS = createField(DSL.name("status"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>main.review.insert_date</code>.
     */
    public final TableField<ReviewRecord, LocalDateTime> INSERT_DATE = createField(DSL.name("insert_date"), SQLDataType.LOCALDATETIME(0).nullable(false), this, "");

    /**
     * The column <code>main.review.update_date</code>.
     */
    public final TableField<ReviewRecord, LocalDateTime> UPDATE_DATE = createField(DSL.name("update_date"), SQLDataType.LOCALDATETIME(0).nullable(false), this, "");

    /**
     * The column <code>main.review.delete_flag</code>.
     */
    public final TableField<ReviewRecord, Byte> DELETE_FLAG = createField(DSL.name("delete_flag"), SQLDataType.TINYINT.nullable(false), this, "");

    private Review(Name alias, Table<ReviewRecord> aliased) {
        this(alias, aliased, null);
    }

    private Review(Name alias, Table<ReviewRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>main.review</code> table reference
     */
    public Review(String alias) {
        this(DSL.name(alias), REVIEW);
    }

    /**
     * Create an aliased <code>main.review</code> table reference
     */
    public Review(Name alias) {
        this(alias, REVIEW);
    }

    /**
     * Create a <code>main.review</code> table reference
     */
    public Review() {
        this(DSL.name("review"), null);
    }

    public <O extends Record> Review(Table<O> child, ForeignKey<O, ReviewRecord> key) {
        super(child, key, REVIEW);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Main.MAIN;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.asList(Indexes.REVIEW_USER_ID_FK_IDX);
    }

    @Override
    public Identity<ReviewRecord, Integer> getIdentity() {
        return (Identity<ReviewRecord, Integer>) super.getIdentity();
    }

    @Override
    public UniqueKey<ReviewRecord> getPrimaryKey() {
        return Keys.KEY_REVIEW_PRIMARY;
    }

    @Override
    public List<ForeignKey<ReviewRecord, ?>> getReferences() {
        return Arrays.asList(Keys.REVIEW_USER_ID_FK);
    }

    private transient User _user;

    public User user() {
        if (_user == null)
            _user = new User(this, Keys.REVIEW_USER_ID_FK);

        return _user;
    }

    @Override
    public Review as(String alias) {
        return new Review(DSL.name(alias), this);
    }

    @Override
    public Review as(Name alias) {
        return new Review(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Review rename(String name) {
        return new Review(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Review rename(Name name) {
        return new Review(name, null);
    }

    // -------------------------------------------------------------------------
    // Row9 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row9<Integer, Integer, String, String, Integer, Integer, LocalDateTime, LocalDateTime, Byte> fieldsRow() {
        return (Row9) super.fieldsRow();
    }
}
