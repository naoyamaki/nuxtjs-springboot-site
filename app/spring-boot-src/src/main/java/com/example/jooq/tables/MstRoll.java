/*
 * This file is generated by jOOQ.
 */
package com.example.jooq.tables;


import com.example.jooq.Keys;
import com.example.jooq.Main;
import com.example.jooq.tables.records.MstRollRecord;

import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row2;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class MstRoll extends TableImpl<MstRollRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>main.mst_roll</code>
     */
    public static final MstRoll MST_ROLL = new MstRoll();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<MstRollRecord> getRecordType() {
        return MstRollRecord.class;
    }

    /**
     * The column <code>main.mst_roll.id</code>.
     */
    public final TableField<MstRollRecord, Integer> ID = createField(DSL.name("id"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>main.mst_roll.label</code>.
     */
    public final TableField<MstRollRecord, String> LABEL = createField(DSL.name("label"), SQLDataType.VARCHAR(45).nullable(false), this, "");

    private MstRoll(Name alias, Table<MstRollRecord> aliased) {
        this(alias, aliased, null);
    }

    private MstRoll(Name alias, Table<MstRollRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>main.mst_roll</code> table reference
     */
    public MstRoll(String alias) {
        this(DSL.name(alias), MST_ROLL);
    }

    /**
     * Create an aliased <code>main.mst_roll</code> table reference
     */
    public MstRoll(Name alias) {
        this(alias, MST_ROLL);
    }

    /**
     * Create a <code>main.mst_roll</code> table reference
     */
    public MstRoll() {
        this(DSL.name("mst_roll"), null);
    }

    public <O extends Record> MstRoll(Table<O> child, ForeignKey<O, MstRollRecord> key) {
        super(child, key, MST_ROLL);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Main.MAIN;
    }

    @Override
    public UniqueKey<MstRollRecord> getPrimaryKey() {
        return Keys.KEY_MST_ROLL_PRIMARY;
    }

    @Override
    public List<UniqueKey<MstRollRecord>> getUniqueKeys() {
        return Arrays.asList(Keys.KEY_MST_ROLL_ID_UNIQUE, Keys.KEY_MST_ROLL_LABEL_UNIQUE);
    }

    @Override
    public MstRoll as(String alias) {
        return new MstRoll(DSL.name(alias), this);
    }

    @Override
    public MstRoll as(Name alias) {
        return new MstRoll(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public MstRoll rename(String name) {
        return new MstRoll(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public MstRoll rename(Name name) {
        return new MstRoll(name, null);
    }

    // -------------------------------------------------------------------------
    // Row2 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row2<Integer, String> fieldsRow() {
        return (Row2) super.fieldsRow();
    }
}
