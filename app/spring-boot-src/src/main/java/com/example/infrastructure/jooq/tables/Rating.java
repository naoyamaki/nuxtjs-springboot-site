/*
 * This file is generated by jOOQ.
 */
package com.example.infrastructure.jooq.tables;


import com.example.infrastructure.jooq.Indexes;
import com.example.infrastructure.jooq.Keys;
import com.example.infrastructure.jooq.Main;
import com.example.infrastructure.jooq.tables.records.RatingRecord;

import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row4;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Rating extends TableImpl<RatingRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>main.rating</code>
     */
    public static final Rating RATING = new Rating();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<RatingRecord> getRecordType() {
        return RatingRecord.class;
    }

    /**
     * The column <code>main.rating.user_id</code>.
     */
    public final TableField<RatingRecord, Integer> USER_ID = createField(DSL.name("user_id"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>main.rating.review_id</code>.
     */
    public final TableField<RatingRecord, Integer> REVIEW_ID = createField(DSL.name("review_id"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>main.rating.is_good</code>.
     */
    public final TableField<RatingRecord, Byte> IS_GOOD = createField(DSL.name("is_good"), SQLDataType.TINYINT.nullable(false), this, "");

    /**
     * The column <code>main.rating.insert_date</code>.
     */
    public final TableField<RatingRecord, LocalDateTime> INSERT_DATE = createField(DSL.name("insert_date"), SQLDataType.LOCALDATETIME(0).nullable(false), this, "");

    private Rating(Name alias, Table<RatingRecord> aliased) {
        this(alias, aliased, null);
    }

    private Rating(Name alias, Table<RatingRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>main.rating</code> table reference
     */
    public Rating(String alias) {
        this(DSL.name(alias), RATING);
    }

    /**
     * Create an aliased <code>main.rating</code> table reference
     */
    public Rating(Name alias) {
        this(alias, RATING);
    }

    /**
     * Create a <code>main.rating</code> table reference
     */
    public Rating() {
        this(DSL.name("rating"), null);
    }

    public <O extends Record> Rating(Table<O> child, ForeignKey<O, RatingRecord> key) {
        super(child, key, RATING);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Main.MAIN;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.asList(Indexes.RATING_REVIEW_ID_FK_IDX, Indexes.RATING_USER_ID_FK_IDX);
    }

    @Override
    public List<ForeignKey<RatingRecord, ?>> getReferences() {
        return Arrays.asList(Keys.RATING_USER_ID_FK, Keys.RATING_REVIEW_ID_FK);
    }

    private transient User _user;
    private transient Review _review;

    public User user() {
        if (_user == null)
            _user = new User(this, Keys.RATING_USER_ID_FK);

        return _user;
    }

    public Review review() {
        if (_review == null)
            _review = new Review(this, Keys.RATING_REVIEW_ID_FK);

        return _review;
    }

    @Override
    public Rating as(String alias) {
        return new Rating(DSL.name(alias), this);
    }

    @Override
    public Rating as(Name alias) {
        return new Rating(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Rating rename(String name) {
        return new Rating(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Rating rename(Name name) {
        return new Rating(name, null);
    }

    // -------------------------------------------------------------------------
    // Row4 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row4<Integer, Integer, Byte, LocalDateTime> fieldsRow() {
        return (Row4) super.fieldsRow();
    }
}
