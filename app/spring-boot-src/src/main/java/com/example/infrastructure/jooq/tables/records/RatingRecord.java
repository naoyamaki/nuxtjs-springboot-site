/*
 * This file is generated by jOOQ.
 */
package com.example.infrastructure.jooq.tables.records;


import com.example.infrastructure.jooq.tables.Rating;

import java.time.LocalDateTime;

import org.jooq.Field;
import org.jooq.Record4;
import org.jooq.Row4;
import org.jooq.impl.TableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class RatingRecord extends TableRecordImpl<RatingRecord> implements Record4<Integer, Integer, Byte, LocalDateTime> {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>main.rating.user_id</code>.
     */
    public void setUserId(Integer value) {
        set(0, value);
    }

    /**
     * Getter for <code>main.rating.user_id</code>.
     */
    public Integer getUserId() {
        return (Integer) get(0);
    }

    /**
     * Setter for <code>main.rating.review_id</code>.
     */
    public void setReviewId(Integer value) {
        set(1, value);
    }

    /**
     * Getter for <code>main.rating.review_id</code>.
     */
    public Integer getReviewId() {
        return (Integer) get(1);
    }

    /**
     * Setter for <code>main.rating.is_good</code>.
     */
    public void setIsGood(Byte value) {
        set(2, value);
    }

    /**
     * Getter for <code>main.rating.is_good</code>.
     */
    public Byte getIsGood() {
        return (Byte) get(2);
    }

    /**
     * Setter for <code>main.rating.insert_date</code>.
     */
    public void setInsertDate(LocalDateTime value) {
        set(3, value);
    }

    /**
     * Getter for <code>main.rating.insert_date</code>.
     */
    public LocalDateTime getInsertDate() {
        return (LocalDateTime) get(3);
    }

    // -------------------------------------------------------------------------
    // Record4 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row4<Integer, Integer, Byte, LocalDateTime> fieldsRow() {
        return (Row4) super.fieldsRow();
    }

    @Override
    public Row4<Integer, Integer, Byte, LocalDateTime> valuesRow() {
        return (Row4) super.valuesRow();
    }

    @Override
    public Field<Integer> field1() {
        return Rating.RATING.USER_ID;
    }

    @Override
    public Field<Integer> field2() {
        return Rating.RATING.REVIEW_ID;
    }

    @Override
    public Field<Byte> field3() {
        return Rating.RATING.IS_GOOD;
    }

    @Override
    public Field<LocalDateTime> field4() {
        return Rating.RATING.INSERT_DATE;
    }

    @Override
    public Integer component1() {
        return getUserId();
    }

    @Override
    public Integer component2() {
        return getReviewId();
    }

    @Override
    public Byte component3() {
        return getIsGood();
    }

    @Override
    public LocalDateTime component4() {
        return getInsertDate();
    }

    @Override
    public Integer value1() {
        return getUserId();
    }

    @Override
    public Integer value2() {
        return getReviewId();
    }

    @Override
    public Byte value3() {
        return getIsGood();
    }

    @Override
    public LocalDateTime value4() {
        return getInsertDate();
    }

    @Override
    public RatingRecord value1(Integer value) {
        setUserId(value);
        return this;
    }

    @Override
    public RatingRecord value2(Integer value) {
        setReviewId(value);
        return this;
    }

    @Override
    public RatingRecord value3(Byte value) {
        setIsGood(value);
        return this;
    }

    @Override
    public RatingRecord value4(LocalDateTime value) {
        setInsertDate(value);
        return this;
    }

    @Override
    public RatingRecord values(Integer value1, Integer value2, Byte value3, LocalDateTime value4) {
        value1(value1);
        value2(value2);
        value3(value3);
        value4(value4);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached RatingRecord
     */
    public RatingRecord() {
        super(Rating.RATING);
    }

    /**
     * Create a detached, initialised RatingRecord
     */
    public RatingRecord(Integer userId, Integer reviewId, Byte isGood, LocalDateTime insertDate) {
        super(Rating.RATING);

        setUserId(userId);
        setReviewId(reviewId);
        setIsGood(isGood);
        setInsertDate(insertDate);
    }
}
