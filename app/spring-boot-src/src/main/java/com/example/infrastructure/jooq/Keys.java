/*
 * This file is generated by jOOQ.
 */
package com.example.infrastructure.jooq;


import com.example.infrastructure.jooq.tables.Rating;
import com.example.infrastructure.jooq.tables.Review;
import com.example.infrastructure.jooq.tables.User;
import com.example.infrastructure.jooq.tables.records.RatingRecord;
import com.example.infrastructure.jooq.tables.records.ReviewRecord;
import com.example.infrastructure.jooq.tables.records.UserRecord;

import org.jooq.ForeignKey;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.Internal;


/**
 * A class modelling foreign key relationships and constraints of tables in
 * main.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Keys {

    // -------------------------------------------------------------------------
    // UNIQUE and PRIMARY KEY definitions
    // -------------------------------------------------------------------------

    public static final UniqueKey<ReviewRecord> KEY_REVIEW_PRIMARY = Internal.createUniqueKey(Review.REVIEW, DSL.name("KEY_review_PRIMARY"), new TableField[] { Review.REVIEW.ID }, true);
    public static final UniqueKey<UserRecord> KEY_USER_EMAIL_UNIQUE = Internal.createUniqueKey(User.USER, DSL.name("KEY_user_email_UNIQUE"), new TableField[] { User.USER.EMAIL }, true);
    public static final UniqueKey<UserRecord> KEY_USER_ID_UNIQUE = Internal.createUniqueKey(User.USER, DSL.name("KEY_user_id_UNIQUE"), new TableField[] { User.USER.ID }, true);
    public static final UniqueKey<UserRecord> KEY_USER_PRIMARY = Internal.createUniqueKey(User.USER, DSL.name("KEY_user_PRIMARY"), new TableField[] { User.USER.ID }, true);

    // -------------------------------------------------------------------------
    // FOREIGN KEY definitions
    // -------------------------------------------------------------------------

    public static final ForeignKey<RatingRecord, ReviewRecord> RATING_REVIEW_ID_FK = Internal.createForeignKey(Rating.RATING, DSL.name("rating_review_id_fk"), new TableField[] { Rating.RATING.REVIEW_ID }, Keys.KEY_REVIEW_PRIMARY, new TableField[] { Review.REVIEW.ID }, true);
    public static final ForeignKey<RatingRecord, UserRecord> RATING_USER_ID_FK = Internal.createForeignKey(Rating.RATING, DSL.name("rating_user_id_fk"), new TableField[] { Rating.RATING.USER_ID }, Keys.KEY_USER_PRIMARY, new TableField[] { User.USER.ID }, true);
    public static final ForeignKey<ReviewRecord, UserRecord> REVIEW_USER_ID_FK = Internal.createForeignKey(Review.REVIEW, DSL.name("review_user_id_fk"), new TableField[] { Review.REVIEW.USER_ID }, Keys.KEY_USER_PRIMARY, new TableField[] { User.USER.ID }, true);
}
